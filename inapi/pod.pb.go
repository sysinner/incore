// Copyright 2015 Eryx <evorui аt gmаil dοt cοm>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: pod.proto

package inapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PbPodSpecBoxImageDriver int32

const (
	PbPodSpecBoxImageDriver_Unknown PbPodSpecBoxImageDriver = 0
	PbPodSpecBoxImageDriver_Docker  PbPodSpecBoxImageDriver = 1
	PbPodSpecBoxImageDriver_Rkt     PbPodSpecBoxImageDriver = 2
	PbPodSpecBoxImageDriver_Pouch   PbPodSpecBoxImageDriver = 3
)

// Enum value maps for PbPodSpecBoxImageDriver.
var (
	PbPodSpecBoxImageDriver_name = map[int32]string{
		0: "Unknown",
		1: "Docker",
		2: "Rkt",
		3: "Pouch",
	}
	PbPodSpecBoxImageDriver_value = map[string]int32{
		"Unknown": 0,
		"Docker":  1,
		"Rkt":     2,
		"Pouch":   3,
	}
)

func (x PbPodSpecBoxImageDriver) Enum() *PbPodSpecBoxImageDriver {
	p := new(PbPodSpecBoxImageDriver)
	*p = x
	return p
}

func (x PbPodSpecBoxImageDriver) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PbPodSpecBoxImageDriver) Descriptor() protoreflect.EnumDescriptor {
	return file_pod_proto_enumTypes[0].Descriptor()
}

func (PbPodSpecBoxImageDriver) Type() protoreflect.EnumType {
	return &file_pod_proto_enumTypes[0]
}

func (x PbPodSpecBoxImageDriver) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PbPodSpecBoxImageDriver.Descriptor instead.
func (PbPodSpecBoxImageDriver) EnumDescriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{0}
}

type HealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartId  uint32 `protobuf:"varint,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty" toml:"part_id,omitempty"` // struct:object_slice_key
	Action  uint32 `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty"`
	Updated uint32 `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty"`
	Message uint32 `protobuf:"varint,6,opt,name=message,proto3" json:"message,omitempty" toml:"message,omitempty"`
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{0}
}

func (x *HealthStatus) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *HealthStatus) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *HealthStatus) GetUpdated() uint32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *HealthStatus) GetMessage() uint32 {
	if x != nil {
		return x.Message
	}
	return 0
}

type PbPodRepStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodId  string `protobuf:"bytes,1,opt,name=pod_id,json=podId,proto3" json:"pod_id,omitempty" toml:"pod_id,omitempty"`  // struct:object_slice_key
	RepId  uint32 `protobuf:"varint,2,opt,name=rep_id,json=repId,proto3" json:"rep_id,omitempty" toml:"rep_id,omitempty"` // struct:object_slice_key
	Action uint32 `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty"`
	Node   string `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty" toml:"node,omitempty"`
	// PbPodBoxStatus          box     = 10;
	OpLog   *PbOpLogSets       `protobuf:"bytes,6,opt,name=op_log,json=opLog,proto3" json:"op_log,omitempty" toml:"op_log,omitempty"`
	Stats   *PbStatsSampleFeed `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty" toml:"stats,omitempty"`
	Updated uint32             `protobuf:"varint,8,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty"` // unix time in seconds
	Volumes []*PbVolumeStatus  `protobuf:"bytes,9,rep,name=volumes,proto3" json:"volumes,omitempty" toml:"volumes,omitempty"`
	Started uint32             `protobuf:"varint,11,opt,name=started,proto3" json:"started,omitempty" toml:"started,omitempty"` // unix time in seconds
	Ports   []*PbServicePort   `protobuf:"bytes,12,rep,name=ports,proto3" json:"ports,omitempty" toml:"ports,omitempty"`
	Health  *HealthStatus      `protobuf:"bytes,13,opt,name=health,proto3" json:"health,omitempty" toml:"health,omitempty"`
}

func (x *PbPodRepStatus) Reset() {
	*x = PbPodRepStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbPodRepStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbPodRepStatus) ProtoMessage() {}

func (x *PbPodRepStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbPodRepStatus.ProtoReflect.Descriptor instead.
func (*PbPodRepStatus) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{1}
}

func (x *PbPodRepStatus) GetPodId() string {
	if x != nil {
		return x.PodId
	}
	return ""
}

func (x *PbPodRepStatus) GetRepId() uint32 {
	if x != nil {
		return x.RepId
	}
	return 0
}

func (x *PbPodRepStatus) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *PbPodRepStatus) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PbPodRepStatus) GetOpLog() *PbOpLogSets {
	if x != nil {
		return x.OpLog
	}
	return nil
}

func (x *PbPodRepStatus) GetStats() *PbStatsSampleFeed {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PbPodRepStatus) GetUpdated() uint32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PbPodRepStatus) GetVolumes() []*PbVolumeStatus {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *PbPodRepStatus) GetStarted() uint32 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *PbPodRepStatus) GetPorts() []*PbServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *PbPodRepStatus) GetHealth() *HealthStatus {
	if x != nil {
		return x.Health
	}
	return nil
}

type PbVolumeMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty"` // struct:object_slice_equal_skip
	ReadOnly  bool   `protobuf:"varint,2,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty" toml:"read_only,omitempty"`
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty" toml:"mount_path,omitempty"` // struct:object_slice_key
	HostDir   string `protobuf:"bytes,4,opt,name=host_dir,json=hostDir,proto3" json:"host_dir,omitempty" toml:"host_dir,omitempty"`
}

func (x *PbVolumeMount) Reset() {
	*x = PbVolumeMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbVolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbVolumeMount) ProtoMessage() {}

func (x *PbVolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbVolumeMount.ProtoReflect.Descriptor instead.
func (*PbVolumeMount) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{2}
}

func (x *PbVolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PbVolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

func (x *PbVolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *PbVolumeMount) GetHostDir() string {
	if x != nil {
		return x.HostDir
	}
	return ""
}

type PbVolumeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MountPath string `protobuf:"bytes,1,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty" toml:"mount_path,omitempty"` // struct:object_slice_key
	Used      int64  `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty" toml:"used,omitempty"`
}

func (x *PbVolumeStatus) Reset() {
	*x = PbVolumeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbVolumeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbVolumeStatus) ProtoMessage() {}

func (x *PbVolumeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbVolumeStatus.ProtoReflect.Descriptor instead.
func (*PbVolumeStatus) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{3}
}

func (x *PbVolumeStatus) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *PbVolumeStatus) GetUsed() int64 {
	if x != nil {
		return x.Used
	}
	return 0
}

type PbServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty"`                       // struct:object_slice_equal_skip
	BoxPort  uint32 `protobuf:"varint,2,opt,name=box_port,json=boxPort,proto3" json:"box_port,omitempty" toml:"box_port,omitempty"` // struct:object_slice_key
	HostPort uint32 `protobuf:"varint,3,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty" toml:"host_port,omitempty"`
}

func (x *PbServicePort) Reset() {
	*x = PbServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbServicePort) ProtoMessage() {}

func (x *PbServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbServicePort.ProtoReflect.Descriptor instead.
func (*PbServicePort) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{4}
}

func (x *PbServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PbServicePort) GetBoxPort() uint32 {
	if x != nil {
		return x.BoxPort
	}
	return 0
}

func (x *PbServicePort) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

type PbPodBoxStatusExecutor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty"` // struct:object_slice_key
	Phase        string `protobuf:"bytes,2,opt,name=phase,proto3" json:"phase,omitempty" toml:"phase,omitempty"`
	Retry        uint32 `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty" toml:"retry,omitempty"`
	ErrorCode    uint32 `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty" toml:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty" toml:"error_message,omitempty"`
}

func (x *PbPodBoxStatusExecutor) Reset() {
	*x = PbPodBoxStatusExecutor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbPodBoxStatusExecutor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbPodBoxStatusExecutor) ProtoMessage() {}

func (x *PbPodBoxStatusExecutor) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbPodBoxStatusExecutor.ProtoReflect.Descriptor instead.
func (*PbPodBoxStatusExecutor) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{5}
}

func (x *PbPodBoxStatusExecutor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PbPodBoxStatusExecutor) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PbPodBoxStatusExecutor) GetRetry() uint32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *PbPodBoxStatusExecutor) GetErrorCode() uint32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *PbPodBoxStatusExecutor) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type PodBoxBlockLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path      string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty" toml:"path,omitempty"`
	ReadBps   int64  `protobuf:"varint,2,opt,name=read_bps,json=readBps,proto3" json:"read_bps,omitempty" toml:"read_bps,omitempty"`
	ReadIops  int64  `protobuf:"varint,3,opt,name=read_iops,json=readIops,proto3" json:"read_iops,omitempty" toml:"read_iops,omitempty"`
	WriteBps  int64  `protobuf:"varint,4,opt,name=write_bps,json=writeBps,proto3" json:"write_bps,omitempty" toml:"write_bps,omitempty"`
	WriteIops int64  `protobuf:"varint,5,opt,name=write_iops,json=writeIops,proto3" json:"write_iops,omitempty" toml:"write_iops,omitempty"`
}

func (x *PodBoxBlockLimit) Reset() {
	*x = PodBoxBlockLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodBoxBlockLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodBoxBlockLimit) ProtoMessage() {}

func (x *PodBoxBlockLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodBoxBlockLimit.ProtoReflect.Descriptor instead.
func (*PodBoxBlockLimit) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{6}
}

func (x *PodBoxBlockLimit) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PodBoxBlockLimit) GetReadBps() int64 {
	if x != nil {
		return x.ReadBps
	}
	return 0
}

func (x *PodBoxBlockLimit) GetReadIops() int64 {
	if x != nil {
		return x.ReadIops
	}
	return 0
}

func (x *PodBoxBlockLimit) GetWriteBps() int64 {
	if x != nil {
		return x.WriteBps
	}
	return 0
}

func (x *PodBoxBlockLimit) GetWriteIops() int64 {
	if x != nil {
		return x.WriteIops
	}
	return 0
}

// PodBoxStatus represents the current information about a box
type PbPodBoxStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty"` // struct:object_slice_key
	ImageDriver       PbPodSpecBoxImageDriver      `protobuf:"varint,2,opt,name=image_driver,json=imageDriver,proto3,enum=inapi.PbPodSpecBoxImageDriver" json:"image_driver,omitempty" toml:"image_driver,omitempty"`
	ImageOptions      []*Label                     `protobuf:"bytes,3,rep,name=image_options,json=imageOptions,proto3" json:"image_options,omitempty" toml:"image_options,omitempty"`
	ResCpuLimit       int32                        `protobuf:"varint,4,opt,name=res_cpu_limit,json=resCpuLimit,proto3" json:"res_cpu_limit,omitempty" toml:"res_cpu_limit,omitempty"` // in 1 = .1 cores
	ResMemLimit       int32                        `protobuf:"varint,5,opt,name=res_mem_limit,json=resMemLimit,proto3" json:"res_mem_limit,omitempty" toml:"res_mem_limit,omitempty"` // in MiB
	Mounts            []*PbVolumeMount             `protobuf:"bytes,6,rep,name=mounts,proto3" json:"mounts,omitempty" toml:"mounts,omitempty"`
	Ports             []*PbServicePort             `protobuf:"bytes,7,rep,name=ports,proto3" json:"ports,omitempty" toml:"ports,omitempty"`
	Command           []string                     `protobuf:"bytes,8,rep,name=command,proto3" json:"command,omitempty" toml:"command,omitempty"`
	Executors         []*PbPodBoxStatusExecutor    `protobuf:"bytes,9,rep,name=executors,proto3" json:"executors,omitempty" toml:"executors,omitempty"`
	Action            uint32                       `protobuf:"varint,10,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty"`
	Started           uint32                       `protobuf:"varint,11,opt,name=started,proto3" json:"started,omitempty" toml:"started,omitempty"` // unix time in seconds
	Updated           uint32                       `protobuf:"varint,12,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty"` // unix time in seconds
	CpuSets           []int32                      `protobuf:"varint,13,rep,packed,name=cpu_sets,json=cpuSets,proto3" json:"cpu_sets,omitempty" toml:"cpu_sets,omitempty"`
	NetworkMode       int32                        `protobuf:"varint,14,opt,name=network_mode,json=networkMode,proto3" json:"network_mode,omitempty" toml:"network_mode,omitempty"`
	NetworkIpv4       string                       `protobuf:"bytes,15,opt,name=network_ipv4,json=networkIpv4,proto3" json:"network_ipv4,omitempty" toml:"network_ipv4,omitempty"`
	BlkioDeviceLimits map[string]*PodBoxBlockLimit `protobuf:"bytes,16,rep,name=blkio_device_limits,json=blkioDeviceLimits,proto3" json:"blkio_device_limits,omitempty" toml:"blkio_device_limits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PbPodBoxStatus) Reset() {
	*x = PbPodBoxStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbPodBoxStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbPodBoxStatus) ProtoMessage() {}

func (x *PbPodBoxStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbPodBoxStatus.ProtoReflect.Descriptor instead.
func (*PbPodBoxStatus) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{7}
}

func (x *PbPodBoxStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PbPodBoxStatus) GetImageDriver() PbPodSpecBoxImageDriver {
	if x != nil {
		return x.ImageDriver
	}
	return PbPodSpecBoxImageDriver_Unknown
}

func (x *PbPodBoxStatus) GetImageOptions() []*Label {
	if x != nil {
		return x.ImageOptions
	}
	return nil
}

func (x *PbPodBoxStatus) GetResCpuLimit() int32 {
	if x != nil {
		return x.ResCpuLimit
	}
	return 0
}

func (x *PbPodBoxStatus) GetResMemLimit() int32 {
	if x != nil {
		return x.ResMemLimit
	}
	return 0
}

func (x *PbPodBoxStatus) GetMounts() []*PbVolumeMount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *PbPodBoxStatus) GetPorts() []*PbServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *PbPodBoxStatus) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *PbPodBoxStatus) GetExecutors() []*PbPodBoxStatusExecutor {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *PbPodBoxStatus) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *PbPodBoxStatus) GetStarted() uint32 {
	if x != nil {
		return x.Started
	}
	return 0
}

func (x *PbPodBoxStatus) GetUpdated() uint32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

func (x *PbPodBoxStatus) GetCpuSets() []int32 {
	if x != nil {
		return x.CpuSets
	}
	return nil
}

func (x *PbPodBoxStatus) GetNetworkMode() int32 {
	if x != nil {
		return x.NetworkMode
	}
	return 0
}

func (x *PbPodBoxStatus) GetNetworkIpv4() string {
	if x != nil {
		return x.NetworkIpv4
	}
	return ""
}

func (x *PbPodBoxStatus) GetBlkioDeviceLimits() map[string]*PodBoxBlockLimit {
	if x != nil {
		return x.BlkioDeviceLimits
	}
	return nil
}

type PodOperateFailover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reps []*PodOperateFailoverReplica `protobuf:"bytes,2,rep,name=reps,proto3" json:"reps,omitempty" toml:"reps,omitempty"`
}

func (x *PodOperateFailover) Reset() {
	*x = PodOperateFailover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodOperateFailover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodOperateFailover) ProtoMessage() {}

func (x *PodOperateFailover) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodOperateFailover.ProtoReflect.Descriptor instead.
func (*PodOperateFailover) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{8}
}

func (x *PodOperateFailover) GetReps() []*PodOperateFailoverReplica {
	if x != nil {
		return x.Reps
	}
	return nil
}

type PodOperateFailoverReplica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepId         uint32 `protobuf:"varint,1,opt,name=rep_id,json=repId,proto3" json:"rep_id,omitempty" toml:"rep_id,omitempty"` // struct:object_slice_key
	Action        uint32 `protobuf:"varint,4,opt,name=action,proto3" json:"action,omitempty" toml:"action,omitempty"`
	ManualChecked uint32 `protobuf:"varint,13,opt,name=manual_checked,json=manualChecked,proto3" json:"manual_checked,omitempty" toml:"manual_checked,omitempty"`
	Created       uint32 `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty" toml:"created,omitempty"`
	Updated       uint32 `protobuf:"varint,15,opt,name=updated,proto3" json:"updated,omitempty" toml:"updated,omitempty"`
}

func (x *PodOperateFailoverReplica) Reset() {
	*x = PodOperateFailoverReplica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodOperateFailoverReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodOperateFailoverReplica) ProtoMessage() {}

func (x *PodOperateFailoverReplica) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodOperateFailoverReplica.ProtoReflect.Descriptor instead.
func (*PodOperateFailoverReplica) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{9}
}

func (x *PodOperateFailoverReplica) GetRepId() uint32 {
	if x != nil {
		return x.RepId
	}
	return 0
}

func (x *PodOperateFailoverReplica) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *PodOperateFailoverReplica) GetManualChecked() uint32 {
	if x != nil {
		return x.ManualChecked
	}
	return 0
}

func (x *PodOperateFailoverReplica) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PodOperateFailoverReplica) GetUpdated() uint32 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type PodOperateDeploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocHostRepeatEnable bool `protobuf:"varint,3,opt,name=alloc_host_repeat_enable,json=allocHostRepeatEnable,proto3" json:"alloc_host_repeat_enable,omitempty" toml:"alloc_host_repeat_enable,omitempty"`
}

func (x *PodOperateDeploy) Reset() {
	*x = PodOperateDeploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodOperateDeploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodOperateDeploy) ProtoMessage() {}

func (x *PodOperateDeploy) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodOperateDeploy.ProtoReflect.Descriptor instead.
func (*PodOperateDeploy) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{10}
}

func (x *PodOperateDeploy) GetAllocHostRepeatEnable() bool {
	if x != nil {
		return x.AllocHostRepeatEnable
	}
	return false
}

type PodUserTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" toml:"id,omitempty"` // struct:object_slice_key
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" toml:"name,omitempty"`
	UserFrom string `protobuf:"bytes,5,opt,name=user_from,json=userFrom,proto3" json:"user_from,omitempty" toml:"user_from,omitempty"`
	UserTo   string `protobuf:"bytes,6,opt,name=user_to,json=userTo,proto3" json:"user_to,omitempty" toml:"user_to,omitempty"`
	Created  uint32 `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty" toml:"created,omitempty"`
}

func (x *PodUserTransfer) Reset() {
	*x = PodUserTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodUserTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodUserTransfer) ProtoMessage() {}

func (x *PodUserTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodUserTransfer.ProtoReflect.Descriptor instead.
func (*PodUserTransfer) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{11}
}

func (x *PodUserTransfer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PodUserTransfer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodUserTransfer) GetUserFrom() string {
	if x != nil {
		return x.UserFrom
	}
	return ""
}

func (x *PodUserTransfer) GetUserTo() string {
	if x != nil {
		return x.UserTo
	}
	return ""
}

func (x *PodUserTransfer) GetCreated() uint32 {
	if x != nil {
		return x.Created
	}
	return 0
}

type PodPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeStart   uint32  `protobuf:"varint,2,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty" toml:"time_start,omitempty"`
	TimeClose   uint32  `protobuf:"varint,3,opt,name=time_close,json=timeClose,proto3" json:"time_close,omitempty" toml:"time_close,omitempty"`
	Prepay      float64 `protobuf:"fixed64,5,opt,name=prepay,proto3" json:"prepay,omitempty" toml:"prepay,omitempty"`
	Payout      float64 `protobuf:"fixed64,6,opt,name=payout,proto3" json:"payout,omitempty" toml:"payout,omitempty"`
	CycleAmount float64 `protobuf:"fixed64,7,opt,name=cycle_amount,json=cycleAmount,proto3" json:"cycle_amount,omitempty" toml:"cycle_amount,omitempty"`
	User        string  `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty" toml:"user,omitempty"`
}

func (x *PodPayment) Reset() {
	*x = PodPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pod_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodPayment) ProtoMessage() {}

func (x *PodPayment) ProtoReflect() protoreflect.Message {
	mi := &file_pod_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodPayment.ProtoReflect.Descriptor instead.
func (*PodPayment) Descriptor() ([]byte, []int) {
	return file_pod_proto_rawDescGZIP(), []int{12}
}

func (x *PodPayment) GetTimeStart() uint32 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *PodPayment) GetTimeClose() uint32 {
	if x != nil {
		return x.TimeClose
	}
	return 0
}

func (x *PodPayment) GetPrepay() float64 {
	if x != nil {
		return x.Prepay
	}
	return 0
}

func (x *PodPayment) GetPayout() float64 {
	if x != nil {
		return x.Payout
	}
	return 0
}

func (x *PodPayment) GetCycleAmount() float64 {
	if x != nil {
		return x.CycleAmount
	}
	return 0
}

func (x *PodPayment) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

var File_pod_proto protoreflect.FileDescriptor

var file_pod_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x1a, 0x0b, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x83, 0x03, 0x0a, 0x0e, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x74, 0x73, 0x52, 0x05, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x62, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x7a, 0x0a, 0x0d, 0x50, 0x62, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x44, 0x69, 0x72, 0x22, 0x43, 0x0a, 0x0e, 0x50, 0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x0d, 0x50, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x6f, 0x78, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x6f, 0x78, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x42,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x42, 0x6f, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x72, 0x65, 0x61, 0x64, 0x42, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42,
	0x70, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6f, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x49, 0x6f, 0x70,
	0x73, 0x22, 0xfd, 0x05, 0x0a, 0x0e, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x6f, 0x78, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x4d, 0x65,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x62, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x42, 0x6f, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75, 0x53, 0x65, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x70, 0x76, 0x34, 0x12, 0x5c, 0x0a, 0x13, 0x62, 0x6c, 0x6b, 0x69, 0x6f, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x42,
	0x6f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x62, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x1a, 0x5d, 0x0a, 0x16, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x64, 0x42, 0x6f, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x04, 0x72, 0x65, 0x70, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x19, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x4b, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x50,
	0x6f, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x70, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x70, 0x61, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x2a, 0x46,
	0x0a, 0x17, 0x50, 0x62, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x42, 0x6f, 0x78, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x6b, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x6f, 0x75, 0x63, 0x68, 0x10, 0x03, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x69, 0x6e, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pod_proto_rawDescOnce sync.Once
	file_pod_proto_rawDescData = file_pod_proto_rawDesc
)

func file_pod_proto_rawDescGZIP() []byte {
	file_pod_proto_rawDescOnce.Do(func() {
		file_pod_proto_rawDescData = protoimpl.X.CompressGZIP(file_pod_proto_rawDescData)
	})
	return file_pod_proto_rawDescData
}

var file_pod_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pod_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pod_proto_goTypes = []interface{}{
	(PbPodSpecBoxImageDriver)(0),      // 0: inapi.PbPodSpecBoxImageDriver
	(*HealthStatus)(nil),              // 1: inapi.HealthStatus
	(*PbPodRepStatus)(nil),            // 2: inapi.PbPodRepStatus
	(*PbVolumeMount)(nil),             // 3: inapi.PbVolumeMount
	(*PbVolumeStatus)(nil),            // 4: inapi.PbVolumeStatus
	(*PbServicePort)(nil),             // 5: inapi.PbServicePort
	(*PbPodBoxStatusExecutor)(nil),    // 6: inapi.PbPodBoxStatusExecutor
	(*PodBoxBlockLimit)(nil),          // 7: inapi.PodBoxBlockLimit
	(*PbPodBoxStatus)(nil),            // 8: inapi.PbPodBoxStatus
	(*PodOperateFailover)(nil),        // 9: inapi.PodOperateFailover
	(*PodOperateFailoverReplica)(nil), // 10: inapi.PodOperateFailoverReplica
	(*PodOperateDeploy)(nil),          // 11: inapi.PodOperateDeploy
	(*PodUserTransfer)(nil),           // 12: inapi.PodUserTransfer
	(*PodPayment)(nil),                // 13: inapi.PodPayment
	nil,                               // 14: inapi.PbPodBoxStatus.BlkioDeviceLimitsEntry
	(*PbOpLogSets)(nil),               // 15: inapi.PbOpLogSets
	(*PbStatsSampleFeed)(nil),         // 16: inapi.PbStatsSampleFeed
	(*Label)(nil),                     // 17: inapi.Label
}
var file_pod_proto_depIdxs = []int32{
	15, // 0: inapi.PbPodRepStatus.op_log:type_name -> inapi.PbOpLogSets
	16, // 1: inapi.PbPodRepStatus.stats:type_name -> inapi.PbStatsSampleFeed
	4,  // 2: inapi.PbPodRepStatus.volumes:type_name -> inapi.PbVolumeStatus
	5,  // 3: inapi.PbPodRepStatus.ports:type_name -> inapi.PbServicePort
	1,  // 4: inapi.PbPodRepStatus.health:type_name -> inapi.HealthStatus
	0,  // 5: inapi.PbPodBoxStatus.image_driver:type_name -> inapi.PbPodSpecBoxImageDriver
	17, // 6: inapi.PbPodBoxStatus.image_options:type_name -> inapi.Label
	3,  // 7: inapi.PbPodBoxStatus.mounts:type_name -> inapi.PbVolumeMount
	5,  // 8: inapi.PbPodBoxStatus.ports:type_name -> inapi.PbServicePort
	6,  // 9: inapi.PbPodBoxStatus.executors:type_name -> inapi.PbPodBoxStatusExecutor
	14, // 10: inapi.PbPodBoxStatus.blkio_device_limits:type_name -> inapi.PbPodBoxStatus.BlkioDeviceLimitsEntry
	10, // 11: inapi.PodOperateFailover.reps:type_name -> inapi.PodOperateFailoverReplica
	7,  // 12: inapi.PbPodBoxStatus.BlkioDeviceLimitsEntry.value:type_name -> inapi.PodBoxBlockLimit
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pod_proto_init() }
func file_pod_proto_init() {
	if File_pod_proto != nil {
		return
	}
	file_inapi_proto_init()
	file_operator_proto_init()
	file_stats_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbPodRepStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbVolumeMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbVolumeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbPodBoxStatusExecutor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodBoxBlockLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbPodBoxStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodOperateFailover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodOperateFailoverReplica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodOperateDeploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodUserTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pod_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pod_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pod_proto_goTypes,
		DependencyIndexes: file_pod_proto_depIdxs,
		EnumInfos:         file_pod_proto_enumTypes,
		MessageInfos:      file_pod_proto_msgTypes,
	}.Build()
	File_pod_proto = out.File
	file_pod_proto_rawDesc = nil
	file_pod_proto_goTypes = nil
	file_pod_proto_depIdxs = nil
}
