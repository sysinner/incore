// Copyright 2015 Eryx <evorui аt gmаil dοt cοm>, All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package inapi;

option go_package = "./;inapi";

import "inapi.proto";
import "operator.proto";
import "stats.proto";

message HealthStatus {
    uint32 part_id  = 1; // struct:object_slice_key
    uint32 action  = 2;
    uint32 updated  = 5;
    uint32 message  = 6;
}

message PbPodRepStatus {
    string                  pod_id  = 1; // struct:object_slice_key
    uint32                  rep_id  = 2; // struct:object_slice_key
    uint32                  action  = 3;
    string                  node    = 4;
    // PbPodBoxStatus          box     = 10;
    PbOpLogSets             op_log  = 6;
    PbStatsSampleFeed       stats   = 7;
    uint32                  updated = 8; // unix time in seconds
    repeated PbVolumeStatus volumes = 9;
    uint32                  started = 11; // unix time in seconds
    repeated PbServicePort  ports   = 12;
    HealthStatus            health  = 13;
}

enum PbPodSpecBoxImageDriver {
    Unknown = 0;
    Docker  = 1;
    Rkt     = 2;
    Pouch   = 3;
}

message PbVolumeMount {
    string name       = 1; // struct:object_slice_equal_skip
    bool   read_only  = 2;
    string mount_path = 3; // struct:object_slice_key
    string host_dir   = 4;
}

message PbVolumeStatus {
    string mount_path = 1; // struct:object_slice_key
    int64  used       = 2;
}

message PbServicePort {
    string name      = 1; // struct:object_slice_equal_skip
    uint32 box_port  = 2; // struct:object_slice_key
    uint32 host_port = 3;
}

message PbPodBoxStatusExecutor {
    string name          = 1; // struct:object_slice_key
    string phase         = 2;
    uint32 retry         = 3;
    uint32 error_code    = 4;
    string error_message = 5;
}

message PodBoxBlockLimit {
   string path = 1;
   int64 read_bps = 2; 
   int64 read_iops = 3; 
   int64 write_bps = 4; 
   int64 write_iops = 5; 
}

// PodBoxStatus represents the current information about a box
message PbPodBoxStatus {
    string                          name          = 1; // struct:object_slice_key
    PbPodSpecBoxImageDriver         image_driver  = 2;
    repeated Label                  image_options = 3;
    int32                           res_cpu_limit = 4; // in 1 = .1 cores
    int32                           res_mem_limit = 5; // in MiB
    repeated PbVolumeMount          mounts        = 6;
    repeated PbServicePort          ports         = 7;
    repeated string                 command       = 8;
    repeated PbPodBoxStatusExecutor executors     = 9;
    uint32                          action        = 10;
    uint32                          started       = 11; // unix time in seconds
    uint32                          updated       = 12; // unix time in seconds
    repeated int32                  cpu_sets      = 13;
    int32 network_mode = 14;
    string network_ipv4 = 15;
	map<string, PodBoxBlockLimit> blkio_device_limits = 16;
}

message PodOperateFailover {
    repeated PodOperateFailoverReplica reps = 2;
}

message PodOperateFailoverReplica {
    uint32 rep_id = 1; // struct:object_slice_key
    uint32 action = 4;
    uint32 manual_checked = 13;
    uint32 created = 14;
    uint32 updated = 15;
}

message PodOperateDeploy {
  bool alloc_host_repeat_enable = 3; 
}

message PodUserTransfer {
  string id = 1; // struct:object_slice_key
  string name = 2;
  string user_from = 5;
  string user_to = 6;
  uint32 created = 14;
}

message PodPayment {
  uint32 time_start = 2;
  uint32 time_close = 3;
  double prepay = 5;
  double payout = 6;
  double cycle_amount = 7;
  string user = 9;
}
